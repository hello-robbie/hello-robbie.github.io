{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to My Documentation Site Hey, I\u2019m Robbie \ud83d\udc4b This site is where I document tech experiments, cybersecurity walkthroughs, and general nerdy deep dives. Whether it\u2019s building, reverse engineering, or trying something weird in a home lab \u2014 I break it down step-by-step so it's fun and easy to follow. You\u2019re welcome to borrow, learn from, or remix anything you see here. I use this space for: - \ud83d\udee0 Guides for personal projects I\u2019ve tackled - \ud83d\udd0d Notes from CTFs and security exercises (mostly TryHackMe) - \ud83e\udde0 Stuff I wanted to remember and thought you might too Enjoy the docs. Stay curious.","title":"Home"},{"location":"#welcome-to-my-documentation-site","text":"Hey, I\u2019m Robbie \ud83d\udc4b This site is where I document tech experiments, cybersecurity walkthroughs, and general nerdy deep dives. Whether it\u2019s building, reverse engineering, or trying something weird in a home lab \u2014 I break it down step-by-step so it's fun and easy to follow. You\u2019re welcome to borrow, learn from, or remix anything you see here. I use this space for: - \ud83d\udee0 Guides for personal projects I\u2019ve tackled - \ud83d\udd0d Notes from CTFs and security exercises (mostly TryHackMe) - \ud83e\udde0 Stuff I wanted to remember and thought you might too Enjoy the docs. Stay curious.","title":"Welcome to My Documentation Site"},{"location":"resume/","text":"My Professional Experience Welcome! This page outlines my professional experience in IT infrastructure, cybersecurity, and industrial systems. I've spent the last decade designing resilient systems, mentoring teams, and helping secure critical environments. I\u2019m passionate about sharing what I\u2019ve learned and supporting others on their tech journey. \ud83e\udde0 Experience Lead Security Analyst \u2013 GRC 2024 \u2013 Present - Designed and deployed network segmentation to isolate operational environments. - Implemented an asset and vulnerability management process to support continuous risk mitigation. - Developed secure remote access for sensitive systems. - Mentored junior team members and provided technical leadership. Lead Systems Analyst \u2013 Infrastructure & Automation 2022 \u2013 2024 - Led enterprise patch management and vulnerability research programs. - Re-architected backup and disaster recovery for petabyte-scale data. - Improved recovery times and introduced immutable backups. - Managed infrastructure architecture and coordinated global teams. - Oversaw vendor operations for infrastructure and data platforms. Senior Systems Analyst \u2013 Platform Engineering 2018 \u2013 2022 - Rolled out remote desktop solutions across industrial environments. - Led a large-scale control system upgrade with zero downtime. - Provided tier-3 support and developed internal documentation. - Mentored interns and subject matter experts. Systems Analyst \u2013 Server Engineering 2015 \u2013 2017 - Upgraded legacy platforms and migrated systems to modern environments. - Reduced support requests and licensing costs through consolidation. - Built service dashboards and introduced support performance metrics. \ud83c\udf93 Education Bachelor of Arts \u2013 Communications 2012 \u2013 2016 \ud83d\udcdc Certifications SANS GICSP (Active since 2024) \ud83d\udee0\ufe0f Skills & Tools Infrastructure Design \u00b7 Server Administration \u00b7 Backup & Recovery \u00b7 Directory Services \u00b7 PowerShell & Python \u00b7 Linux & Windows \u00b7 Remote Access \u00b7 ICS/OT Security \u00b7 Project Management \u00b7 Vendor Oversight \u00b7 Mentorship \u00b7 Vulnerability Management Thanks for checking out my experience! If you\u2019re working on something cool in tech or security, I\u2019d love to hear about it.","title":"Resume"},{"location":"resume/#my-professional-experience","text":"Welcome! This page outlines my professional experience in IT infrastructure, cybersecurity, and industrial systems. I've spent the last decade designing resilient systems, mentoring teams, and helping secure critical environments. I\u2019m passionate about sharing what I\u2019ve learned and supporting others on their tech journey.","title":"My Professional Experience"},{"location":"resume/#experience","text":"","title":"\ud83e\udde0 Experience"},{"location":"resume/#lead-security-analyst-grc","text":"2024 \u2013 Present - Designed and deployed network segmentation to isolate operational environments. - Implemented an asset and vulnerability management process to support continuous risk mitigation. - Developed secure remote access for sensitive systems. - Mentored junior team members and provided technical leadership.","title":"Lead Security Analyst \u2013 GRC"},{"location":"resume/#lead-systems-analyst-infrastructure-automation","text":"2022 \u2013 2024 - Led enterprise patch management and vulnerability research programs. - Re-architected backup and disaster recovery for petabyte-scale data. - Improved recovery times and introduced immutable backups. - Managed infrastructure architecture and coordinated global teams. - Oversaw vendor operations for infrastructure and data platforms.","title":"Lead Systems Analyst \u2013 Infrastructure &amp; Automation"},{"location":"resume/#senior-systems-analyst-platform-engineering","text":"2018 \u2013 2022 - Rolled out remote desktop solutions across industrial environments. - Led a large-scale control system upgrade with zero downtime. - Provided tier-3 support and developed internal documentation. - Mentored interns and subject matter experts.","title":"Senior Systems Analyst \u2013 Platform Engineering"},{"location":"resume/#systems-analyst-server-engineering","text":"2015 \u2013 2017 - Upgraded legacy platforms and migrated systems to modern environments. - Reduced support requests and licensing costs through consolidation. - Built service dashboards and introduced support performance metrics.","title":"Systems Analyst \u2013 Server Engineering"},{"location":"resume/#education","text":"Bachelor of Arts \u2013 Communications 2012 \u2013 2016","title":"\ud83c\udf93 Education"},{"location":"resume/#certifications","text":"SANS GICSP (Active since 2024)","title":"\ud83d\udcdc Certifications"},{"location":"resume/#skills-tools","text":"Infrastructure Design \u00b7 Server Administration \u00b7 Backup & Recovery \u00b7 Directory Services \u00b7 PowerShell & Python \u00b7 Linux & Windows \u00b7 Remote Access \u00b7 ICS/OT Security \u00b7 Project Management \u00b7 Vendor Oversight \u00b7 Mentorship \u00b7 Vulnerability Management Thanks for checking out my experience! If you\u2019re working on something cool in tech or security, I\u2019d love to hear about it.","title":"\ud83d\udee0\ufe0f Skills &amp; Tools"},{"location":"blog/honeypots/","text":"Why I Like Internet Storm Center & DShield (and How You Can Help Too) I'm a big fan of the SANS Internet Storm Center (ISC) and its community-driven mission to track global internet threats. They publish daily handler diaries, offer practical incident response tools, and provide a platform where people like you and me can contribute valuable data. One of the most impactful ways to do that is by running a DShield Honeypot . DShield is a low-interaction honeypot that collects SSH, Telnet, and HTTP scan data. It\u2019s lightweight, informative, and most importantly, it shares that telemetry with ISC to help map emerging threats. Setting one up on AWS is a great weekend project, especially if you're into networking, cloud, or cybersecurity. Below is a step-by-step guide I followed and adapted from Matthew OB's post . Comprehensive Guide: Setting Up a DShield Honeypot on AWS (Ubuntu 22.04 LTS) 1. Introduction This guide walks through setting up a DShield low-interaction honeypot using Ubuntu Server 22.04 LTS on an AWS EC2 instance. It includes practical steps and insights from: https://matthewob5.medium.com/setting-up-a-dshield-honeypot-in-aws-2ca5f8a29d9 2. What is DShield? DShield is a low-interaction honeypot created by the SANS Internet Storm Center (ISC). It: - Collects SSH and Telnet login attempts (via Cowrie) - Captures HTTP requests - Logs firewall activity - Sends logs to ISC for global correlation 3. Requirements AWS Free Tier account DShield account: https://secure.dshield.org/myaccount.html SSH key pair Familiarity with Linux terminal Tips: - Enable MFA on AWS accounts - Use IAM users, not root - Set Free Tier alerts 4. Launch EC2 Instance Use Ubuntu Server 22.04 LTS . Do not use 24.04, there are differences in 24.04 that break DShield. Go to EC2 > Launch Instance Name: DShieldHoneypot AMI: Ubuntu Server 22.04 LTS Instance type: t2.micro Key pair: Use or create .pem file Storage: 25 GB Security Group: Inbound: Allow SSH (port 22) from Your_Public_IP/32 5. SSH into EC2 & Update Default SSH Credentials: * Username: ubuntu * Password: None (login is done via SSH key only - password authentication is disabled by default) Use the command below to connect: chmod 400 your-key.pem ssh -i your-key.pem ubuntu@<EC2_PUBLIC_IP> Use the command below to connect: sudo apt update && sudo apt upgrade -y sudo reboot Reconnect after reboot. 6. Create Honeypot User Before tightening sudo permissions, **set a password for the ``user to avoid locking yourself out: sudo passwd ubuntu You'll be prompted to enter and confrm a new password. Save it in a secure location. Then, create a dedicated, non-login user: sudo adduser --disabled-password --gecos \"DShield Honeypot\" dshield Lock down sudo access by editing sudoers: sudo visudo /etc/sudoers.d/90-cloud-init-users Change: ubuntu ALL=(ALL) NOPASSWD:ALL To: ubuntu ALL=(ALL) ALL 7. Install Dependencies Run each command separately to spot issues: sudo apt install python3-pip python2.7 git -y curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py sudo python2.7 get-pip.py Note: python-pip is no longer available - use the pip bootstrap script for Python 2. Reboot the server again: sudo reboot 8. Install DShield Setup the installation environment and run the install script mkdir ~/install && cd ~/install git clone https://github.com/DShield-ISC/dshield.git cd dshield/bin sudo ./install.sh The installer will walk you through configuration: Accept risk and privacy notices Choose Automatic Updates Enter your DShield email and API key > Click Verify Select network interface (usually eth0 ) Configure: Admin Port: Keep default 12222 or choose another Local Network: Use 172.16.0.0/12 if this is your only instance or the full VPC CIDR Additional IPs: Add your public IP Add the same IPs under Ignore FW Log (they won't be logged or redirected) SSL Certificate: Accept default fields: US / Florida / Jacksonville / DShield / Decoy Let it generate a new CA Configure Honeypot Exceptions: Add same IPs to disable honeypot for (internal testing IPs) Add ports 2222 , 2223 , and 8000 to exclude from redirection and logging Watch Out: If you enter incorrect IPs or CIDRs during this step (e.g., mistyping your home IP or setting a wrong subnet), you may block yourself from SSH access on the admin port. If this happens, update the AWS Security Group to temporarily allow access again. Watch Out: The DShield installer modifies /etc/ssh/sshd_config to change the SSH port to 12222. However, this change does not always take effect immediately. Before rebooting: Run sudo ss -tuln | grep 12222 \u2014 confirm the port is open. If it\u2019s not open, run: sudo systemctl restart ssh sudo ss -tuln | grep 12222 Confirm success before continuing. Update the security group attached to the EC2 instance, not just the subnet-level ACLs. The SG must allow TCP 12222 inbound from your IP. Then, test SSH access from your local machine in a separate terminal: ssh -p 12222 -i /path/to/your-key.pem ubuntu@<EC2_PUBLIC_IP> Only proceed with the reboot after confirming that SSH on port 12222 is working. Then reboot: sudo reboot -- 9. Update Security Group Update your Security Group to expose the honeypot to the internet while restricting management access. Recommended Inbound Rules: Type Protocol Port Range Source Description Custom TCP TCP 12222 /32 Allow SSH from home Custom TCP TCP 0-12221 0.0.0.0/0 Expose honeypot ports Custom TCP TCP 12223-65535 0.0.0.0/0 Expose honeypot ports Custom UDP UDP 0-12221 0.0.0.0/0 Expose honeypot ports Custom UDP UDP 12223-65535 0.0.0.0/0 Expose honeypot ports All ICMP - IPv4 ICMP All 0.0.0.0/0 Allow ping/traceroute All ICMP - IPv6 ICMPv6 All ::/0 Allow IPv6 ping (Same TCP/UDP) TCP/UDP All ranges ::/0 Matching IPv6 exposure Outbound Rules: | Type | Port | Destination | Description | |--------------|------|-------------|--------------------| | All traffic | All | 0.0.0.0/0 | Allow outbound | Update Inbound ACLs | Rule # | Type | Protocol | Port Range | Source | Action | |--------|-------------|----------|------------|---------------------|--------| | 100 | All traffic | All | All | 0.0.0.0/0 | Allow | | 110 | Custom TCP | TCP (6) | 12222 | /32 | Allow | | * | All traffic | All | All | 0.0.0.0/0 | Deny | Update Outbound ACLs | Rule # | Type | Protocol | Port Range | Destination | Action | |--------|-------------|----------|--------------|----------------------|--------| | 100 | All traffic | All | All | 0.0.0.0/0 | Allow | | 110 | Custom TCP | TCP (6) | 1024-65535 | /32 | Allow | | * | All traffic | All | All | 0.0.0.0/0 | Deny | Watch Out: Creating the correct security group is not enough - you must associate it with the instance: 1. Go to EC2 -> Instances 2. Select your honeypot instance 3. Scroll to the Security tab 4. Click Manage Security Groups 5. Ensure your SG is added Note: AWS allows traffic if any associated SG allows it. Watch Out: Creating the ACL is not enough \u2014 you must associate it with the subnet: 1. Go to VPC \u2192 Network ACLs 2. Select your honeypot ACL 3. Click the \u201cSubnet associations\u201d tab 4. Click Edit subnet associations 5. Check the box for the subnet your honeypot EC2 instance is using 6. Save your changes Note: NACLs apply at the subnet level and evaluate both inbound and outbound rules. The most specific (lowest rule number) is evaluated first. Be sure your allow rules come before the default deny. What if your IP changes? If your public IP changes and you've restricted port 12222 to your old IP, you'll lose SSH access. To fix this: 1. Log into the AWS Console. 2. Go to EC2 > Security Groups. 3. Find your honeypot's SG and edit the inbound rules. 4. Update the Custom TCP rule for port 12222 to reflect <your new public IP> (use whatismyip.com to find it). 10. Verify Status Run the status script: cd ~/install/dshield/bin ./status.sh Look for messages like: Submitted to DShield: N log(s) sent. All services running. Reboot the server if there are any errors. Otherwise refer to https://github.com/DShield-ISC/dshield/blob/main/STATUSERRORS.md 11. Maintenance It\u2019s a good idea to log in once a month to run sudo apt update && sudo apt upgrade -y , followed by a system reboot . Running the update.sh script monthly is also recommended to ensure your honeypot stays current. sudo apt update && sudo apt upgrade -y sudo reboot cd ~/install/dshield/bin ./update.sh 12. View Logs After some time, log into your DShield account ahd check: - SSH Logs - Web Logs - Firewall Events URL: https://secure.dshield.org/myaccount.html Done Your AWS-hosted DShield honeypot is now online and feeding threat data to the Internet Storm Center. You've also locked it down properly and added safety measures to avoid accidental lockouts. For screenshots and visuals, refer to Matthew\u2019s blog post.","title":"Why I Use Honeypots"},{"location":"blog/honeypots/#why-i-like-internet-storm-center-dshield-and-how-you-can-help-too","text":"I'm a big fan of the SANS Internet Storm Center (ISC) and its community-driven mission to track global internet threats. They publish daily handler diaries, offer practical incident response tools, and provide a platform where people like you and me can contribute valuable data. One of the most impactful ways to do that is by running a DShield Honeypot . DShield is a low-interaction honeypot that collects SSH, Telnet, and HTTP scan data. It\u2019s lightweight, informative, and most importantly, it shares that telemetry with ISC to help map emerging threats. Setting one up on AWS is a great weekend project, especially if you're into networking, cloud, or cybersecurity. Below is a step-by-step guide I followed and adapted from Matthew OB's post .","title":"Why I Like Internet Storm Center &amp; DShield (and How You Can Help Too)"},{"location":"blog/honeypots/#comprehensive-guide-setting-up-a-dshield-honeypot-on-aws-ubuntu-2204-lts","text":"","title":"Comprehensive Guide: Setting Up a DShield Honeypot on AWS (Ubuntu 22.04 LTS)"},{"location":"blog/honeypots/#1-introduction","text":"This guide walks through setting up a DShield low-interaction honeypot using Ubuntu Server 22.04 LTS on an AWS EC2 instance. It includes practical steps and insights from: https://matthewob5.medium.com/setting-up-a-dshield-honeypot-in-aws-2ca5f8a29d9","title":"1. Introduction"},{"location":"blog/honeypots/#2-what-is-dshield","text":"DShield is a low-interaction honeypot created by the SANS Internet Storm Center (ISC). It: - Collects SSH and Telnet login attempts (via Cowrie) - Captures HTTP requests - Logs firewall activity - Sends logs to ISC for global correlation","title":"2. What is DShield?"},{"location":"blog/honeypots/#3-requirements","text":"AWS Free Tier account DShield account: https://secure.dshield.org/myaccount.html SSH key pair Familiarity with Linux terminal Tips: - Enable MFA on AWS accounts - Use IAM users, not root - Set Free Tier alerts","title":"3. Requirements"},{"location":"blog/honeypots/#4-launch-ec2-instance","text":"Use Ubuntu Server 22.04 LTS . Do not use 24.04, there are differences in 24.04 that break DShield. Go to EC2 > Launch Instance Name: DShieldHoneypot AMI: Ubuntu Server 22.04 LTS Instance type: t2.micro Key pair: Use or create .pem file Storage: 25 GB Security Group: Inbound: Allow SSH (port 22) from Your_Public_IP/32","title":"4. Launch EC2 Instance"},{"location":"blog/honeypots/#5-ssh-into-ec2-update","text":"Default SSH Credentials: * Username: ubuntu * Password: None (login is done via SSH key only - password authentication is disabled by default) Use the command below to connect: chmod 400 your-key.pem ssh -i your-key.pem ubuntu@<EC2_PUBLIC_IP> Use the command below to connect: sudo apt update && sudo apt upgrade -y sudo reboot Reconnect after reboot.","title":"5. SSH into EC2 &amp; Update"},{"location":"blog/honeypots/#6-create-honeypot-user","text":"Before tightening sudo permissions, **set a password for the ``user to avoid locking yourself out: sudo passwd ubuntu You'll be prompted to enter and confrm a new password. Save it in a secure location. Then, create a dedicated, non-login user: sudo adduser --disabled-password --gecos \"DShield Honeypot\" dshield Lock down sudo access by editing sudoers: sudo visudo /etc/sudoers.d/90-cloud-init-users Change: ubuntu ALL=(ALL) NOPASSWD:ALL To: ubuntu ALL=(ALL) ALL","title":"6. Create Honeypot User"},{"location":"blog/honeypots/#7-install-dependencies","text":"Run each command separately to spot issues: sudo apt install python3-pip python2.7 git -y curl https://bootstrap.pypa.io/pip/2.7/get-pip.py --output get-pip.py sudo python2.7 get-pip.py Note: python-pip is no longer available - use the pip bootstrap script for Python 2. Reboot the server again: sudo reboot","title":"7. Install Dependencies"},{"location":"blog/honeypots/#8-install-dshield","text":"Setup the installation environment and run the install script mkdir ~/install && cd ~/install git clone https://github.com/DShield-ISC/dshield.git cd dshield/bin sudo ./install.sh The installer will walk you through configuration: Accept risk and privacy notices Choose Automatic Updates Enter your DShield email and API key > Click Verify Select network interface (usually eth0 ) Configure: Admin Port: Keep default 12222 or choose another Local Network: Use 172.16.0.0/12 if this is your only instance or the full VPC CIDR Additional IPs: Add your public IP Add the same IPs under Ignore FW Log (they won't be logged or redirected) SSL Certificate: Accept default fields: US / Florida / Jacksonville / DShield / Decoy Let it generate a new CA Configure Honeypot Exceptions: Add same IPs to disable honeypot for (internal testing IPs) Add ports 2222 , 2223 , and 8000 to exclude from redirection and logging Watch Out: If you enter incorrect IPs or CIDRs during this step (e.g., mistyping your home IP or setting a wrong subnet), you may block yourself from SSH access on the admin port. If this happens, update the AWS Security Group to temporarily allow access again. Watch Out: The DShield installer modifies /etc/ssh/sshd_config to change the SSH port to 12222. However, this change does not always take effect immediately. Before rebooting: Run sudo ss -tuln | grep 12222 \u2014 confirm the port is open. If it\u2019s not open, run: sudo systemctl restart ssh sudo ss -tuln | grep 12222 Confirm success before continuing. Update the security group attached to the EC2 instance, not just the subnet-level ACLs. The SG must allow TCP 12222 inbound from your IP. Then, test SSH access from your local machine in a separate terminal: ssh -p 12222 -i /path/to/your-key.pem ubuntu@<EC2_PUBLIC_IP> Only proceed with the reboot after confirming that SSH on port 12222 is working. Then reboot: sudo reboot --","title":"8. Install DShield"},{"location":"blog/honeypots/#9-update-security-group","text":"Update your Security Group to expose the honeypot to the internet while restricting management access. Recommended Inbound Rules: Type Protocol Port Range Source Description Custom TCP TCP 12222 /32 Allow SSH from home Custom TCP TCP 0-12221 0.0.0.0/0 Expose honeypot ports Custom TCP TCP 12223-65535 0.0.0.0/0 Expose honeypot ports Custom UDP UDP 0-12221 0.0.0.0/0 Expose honeypot ports Custom UDP UDP 12223-65535 0.0.0.0/0 Expose honeypot ports All ICMP - IPv4 ICMP All 0.0.0.0/0 Allow ping/traceroute All ICMP - IPv6 ICMPv6 All ::/0 Allow IPv6 ping (Same TCP/UDP) TCP/UDP All ranges ::/0 Matching IPv6 exposure Outbound Rules: | Type | Port | Destination | Description | |--------------|------|-------------|--------------------| | All traffic | All | 0.0.0.0/0 | Allow outbound | Update Inbound ACLs | Rule # | Type | Protocol | Port Range | Source | Action | |--------|-------------|----------|------------|---------------------|--------| | 100 | All traffic | All | All | 0.0.0.0/0 | Allow | | 110 | Custom TCP | TCP (6) | 12222 | /32 | Allow | | * | All traffic | All | All | 0.0.0.0/0 | Deny | Update Outbound ACLs | Rule # | Type | Protocol | Port Range | Destination | Action | |--------|-------------|----------|--------------|----------------------|--------| | 100 | All traffic | All | All | 0.0.0.0/0 | Allow | | 110 | Custom TCP | TCP (6) | 1024-65535 | /32 | Allow | | * | All traffic | All | All | 0.0.0.0/0 | Deny | Watch Out: Creating the correct security group is not enough - you must associate it with the instance: 1. Go to EC2 -> Instances 2. Select your honeypot instance 3. Scroll to the Security tab 4. Click Manage Security Groups 5. Ensure your SG is added Note: AWS allows traffic if any associated SG allows it. Watch Out: Creating the ACL is not enough \u2014 you must associate it with the subnet: 1. Go to VPC \u2192 Network ACLs 2. Select your honeypot ACL 3. Click the \u201cSubnet associations\u201d tab 4. Click Edit subnet associations 5. Check the box for the subnet your honeypot EC2 instance is using 6. Save your changes Note: NACLs apply at the subnet level and evaluate both inbound and outbound rules. The most specific (lowest rule number) is evaluated first. Be sure your allow rules come before the default deny. What if your IP changes? If your public IP changes and you've restricted port 12222 to your old IP, you'll lose SSH access. To fix this: 1. Log into the AWS Console. 2. Go to EC2 > Security Groups. 3. Find your honeypot's SG and edit the inbound rules. 4. Update the Custom TCP rule for port 12222 to reflect <your new public IP> (use whatismyip.com to find it).","title":"9. Update Security Group"},{"location":"blog/honeypots/#10-verify-status","text":"Run the status script: cd ~/install/dshield/bin ./status.sh Look for messages like: Submitted to DShield: N log(s) sent. All services running. Reboot the server if there are any errors. Otherwise refer to https://github.com/DShield-ISC/dshield/blob/main/STATUSERRORS.md","title":"10. Verify Status"},{"location":"blog/honeypots/#11-maintenance","text":"It\u2019s a good idea to log in once a month to run sudo apt update && sudo apt upgrade -y , followed by a system reboot . Running the update.sh script monthly is also recommended to ensure your honeypot stays current. sudo apt update && sudo apt upgrade -y sudo reboot cd ~/install/dshield/bin ./update.sh","title":"11. Maintenance"},{"location":"blog/honeypots/#12-view-logs","text":"After some time, log into your DShield account ahd check: - SSH Logs - Web Logs - Firewall Events URL: https://secure.dshield.org/myaccount.html","title":"12. View Logs"},{"location":"blog/honeypots/#done","text":"Your AWS-hosted DShield honeypot is now online and feeding threat data to the Internet Storm Center. You've also locked it down properly and added safety measures to avoid accidental lockouts. For screenshots and visuals, refer to Matthew\u2019s blog post.","title":"Done"},{"location":"blog/webpaths/","text":"\ud83e\udded Web App Default Paths Cheat Sheet When scanning a network or analyzing a web server, knowing the default paths of popular tools can save you a ton of time. Here\u2019s a field-ready cheat sheet for quickly identifying web apps based on their common routes. \ud83e\uddf1 Node-RED Purpose Path Editor UI / or /red Dashboard UI /ui Flow JSON API /flows \ud83d\udd25 Flask / Werkzeug Apps Purpose Path Examples Admin/Login /login , /admin API Entry /api/ , /api/status , /api/gate Flask Debug Panel Only if misconfigured \u2014 look for /console in stack traces \ud83d\udc18 phpMyAdmin / MySQL Admin Tool Common Paths phpMyAdmin /phpmyadmin , /pma , /mysqladmin , /dbadmin \ud83e\uddea Jenkins Purpose Path Dashboard / , /jenkins , /dashboard Script Console /script \ud83d\udcca Grafana Purpose Path Login/Dashboard /login , /d/ , /dashboard/ \ud83d\udcc8 Kibana Purpose Path Dashboard /app/kibana \ud83d\udcc9 Prometheus Purpose Path Web UI /graph , /metrics \ud83c\udfed Industrial / OT Interfaces These should never be exposed to the public internet, but if you encounter them: Tool Default Port Path Hints Web HMI varies / , /ui , /hmi , /dashboard PLC Admin UI 80, 443 /plc , /admin , /setup \ud83c\udf81 Bonus Tip: Auto-Discovery Tools If guessing doesn't work, try some recon tools: whatweb http://<ip>:<port> ```` or gobuster dir -u http:// : -w /usr/share/wordlists/dirb/common.txt ``` These tools can brute-force or fingerprint the server to uncover hidden or non-standard paths. Stay curious, and don\u2019t forget to double-check if what you find should be exposed at all.","title":"Web App Default Paths"},{"location":"blog/webpaths/#web-app-default-paths-cheat-sheet","text":"When scanning a network or analyzing a web server, knowing the default paths of popular tools can save you a ton of time. Here\u2019s a field-ready cheat sheet for quickly identifying web apps based on their common routes.","title":"\ud83e\udded Web App Default Paths Cheat Sheet"},{"location":"blog/webpaths/#node-red","text":"Purpose Path Editor UI / or /red Dashboard UI /ui Flow JSON API /flows","title":"\ud83e\uddf1 Node-RED"},{"location":"blog/webpaths/#flask-werkzeug-apps","text":"Purpose Path Examples Admin/Login /login , /admin API Entry /api/ , /api/status , /api/gate Flask Debug Panel Only if misconfigured \u2014 look for /console in stack traces","title":"\ud83d\udd25 Flask / Werkzeug Apps"},{"location":"blog/webpaths/#phpmyadmin-mysql-admin","text":"Tool Common Paths phpMyAdmin /phpmyadmin , /pma , /mysqladmin , /dbadmin","title":"\ud83d\udc18 phpMyAdmin / MySQL Admin"},{"location":"blog/webpaths/#jenkins","text":"Purpose Path Dashboard / , /jenkins , /dashboard Script Console /script","title":"\ud83e\uddea Jenkins"},{"location":"blog/webpaths/#grafana","text":"Purpose Path Login/Dashboard /login , /d/ , /dashboard/","title":"\ud83d\udcca Grafana"},{"location":"blog/webpaths/#kibana","text":"Purpose Path Dashboard /app/kibana","title":"\ud83d\udcc8 Kibana"},{"location":"blog/webpaths/#prometheus","text":"Purpose Path Web UI /graph , /metrics","title":"\ud83d\udcc9 Prometheus"},{"location":"blog/webpaths/#industrial-ot-interfaces","text":"These should never be exposed to the public internet, but if you encounter them: Tool Default Port Path Hints Web HMI varies / , /ui , /hmi , /dashboard PLC Admin UI 80, 443 /plc , /admin , /setup","title":"\ud83c\udfed Industrial / OT Interfaces"},{"location":"blog/webpaths/#bonus-tip-auto-discovery-tools","text":"If guessing doesn't work, try some recon tools: whatweb http://<ip>:<port> ```` or gobuster dir -u http:// : -w /usr/share/wordlists/dirb/common.txt ``` These tools can brute-force or fingerprint the server to uncover hidden or non-standard paths. Stay curious, and don\u2019t forget to double-check if what you find should be exposed at all.","title":"\ud83c\udf81 Bonus Tip: Auto-Discovery Tools"}]}